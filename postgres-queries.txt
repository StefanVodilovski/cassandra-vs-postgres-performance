-- Find all 3 star reviews for businesses in New Orleans -- 

SELECT r.review_id, b.business_id, r.stars, b.city
FROM review r
JOIN business b ON r.business_id = b.business_id
WHERE r.stars = 3 AND b.city = 'New Orleans';

-- Find all businesses with 5 star reviews posted in the last year. (the dataset is older so the latest year is 2021)--


SELECT r.review_id, b.business_id, r.stars, r.date
FROM business b
JOIN review r ON b.business_id = r.business_id
WHERE r.stars = 5 AND EXTRACT(YEAR FROM r.date) = 2022;

-- Find all users that are Yelp users since 2007 and have posted above 500 reviews. -- 

SELECT u.name, u.yelping_since, COUNT(r.review_id) as review_count
FROM "user"  as u
JOIN review as r on u.user_id = r.user_id
WHERE EXTRACT(YEAR FROM u.yelping_since)  >= 2007 
GROUP BY u.user_id, u.yelping_since
HAVING COUNT(r.review_id) > 500;


-- Cities ordered by number of business reviews. --

SELECT b.city, COUNT(r.review_id) as review_count
FROM  business as b 
JOIN review as r ON b.business_id = r.business_id
GROUP BY b.city
ORDER BY COUNT(r.review_id) desc;


-- For each business display the average word count on its reviews -- 

with review_word_counts  as(
    SELECT business_id,  array_length(string_to_array(text, ' '), 1) AS word_count
	FROM review
)

SELECT b.business_id, AVG(word_count) AS average_word_count_on_review
FROM review_word_counts
JOIN business b ON b.business_id = review_word_counts.business_id
GROUP BY b.business_id;


	
-- Display how many business belong to each category and display businesses average stars --


select
	TRIM(category) as category, 
	COUNT(*) as business_count, 
	ROUND(AVG(stars),
	2) as average_stars
from
	(
	select
		business_id,
		stars,
		unnest(STRING_TO_ARRAY(categories,
		',')) as category
	from
		business
	where
		categories is not null
) as category_data
group by
	TRIM(category)
order by
	business_count desc;



-- How many reviews are with 1, 2, 3, 4, 5 stars --

	SELECT r.stars, COUNT(r.review_id)
	FORM review r
	GROUP BY r.stars;

-- For each city find top 3 categories by weighted average rating  --

WITH category_expanded AS (
    SELECT b.city, c.category, b.stars
    FROM business b,
         split_categories(b.categories) AS c
    WHERE b.categories IS NOT NULL
),
category_avg AS (
    SELECT
        city,
        category,
        ROUND(AVG(stars), 2) AS avg_stars
    FROM category_expanded
    GROUP BY city, category
),
ranked_categories AS (
    SELECT *,
           RANK() OVER (PARTITION BY city ORDER BY avg_stars DESC) AS category_rank
    FROM category_avg
)
SELECT
    city,
    category,
    avg_stars
FROM ranked_categories
WHERE category_rank <= 3
ORDER BY city, category_rank;



-- For each user display the number of reviewed business, the number of unique categories and average useful votes by review --
	
	with business_category as(
		SELECT distinct trim(unnest(string_to_array(categories, ','))) AS category, business_id 
	    FROM business
   )
	select u.name, u.review_count, r.useful,count(category) as categoreis_reviewed
	from "user" u
	join review r on u.user_id = r.user_id 
	join business b on b.business_id = r.business_id 
	join business_category bc on bc.business_id = b.business_id 
	group by u.user_id, u.review_count, r.useful;


-- Total number of reviews per category and average stars per category for each month in 2021 --
	
	with business_category as(
		SELECT distinct trim(unnest(string_to_array(categories, ','))) AS category, business_id 
	    FROM business
   )
   
   select bc.category, extract(month from r."date") as "month_in_year", count(r.review_id), avg(r.stars)
   from review r 
   join business b on r.business_id = b.business_id 
   join business_category bc on bc.business_id = b.business_id 
   where extract(year from r."date") = 2021
   group by bc.category, extract(month from r."date") 
   order by bc.category, extract(month from r."date") desc 



